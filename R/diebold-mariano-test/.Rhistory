library(forecast)
f1 <- ets(WWWusage)
f2 <- auto.arima(WWWusage)
accuracy(f1)
accuracy(f2)
dm.test(residuals(f1),residuals(f2),h=1)
level = 4
"$(level)"
read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h_forc, "-J", J,
"/combined",
".csv"))
library(forecast)
level = 4
h_forc = 6
J = 277
read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h_forc, "-J", J,
"/combined",
".csv"))
library(forecast)
library(tidyverse)
library(ggplot2)
library(dplyr)
read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h_forc, "-J", J,
"/combined",
".csv"))
df <- read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h_forc, "-J", J,
"/combined",
".csv"))
e1 = df$RDG2 - df$REAL
e2 = df$ARM - df$REAL
e1
dm.test(e1, e2, h = h_forc)
e3 = df$OLS - df$REAL
dm.test(e1, e3, h = h_forc)
dm.test(e1, e3, alternative = "less", h = h_forc)
dm.test(e1, e3, alternative = "less", h = h_forc)
dm.test(e1, e2, alternative = "less", h = h_forc)
dm.test(e1, e2, alternative = "less", h = h_forc)
dm.test(e1, e2, alternative = "greater", h = h_forc)
dm.test(e1, e2, alternative = "less", h = h_forc)
dm.test(e1, e2, h = h_forc)
install.packages("multDM")
library(multDM)
DM.test(RDG2, ARM, df$REAL, loss.type = "SE", h_forc, c = FALSE, H1 = "same")
DM.test(df$RDG2, df$ARM, df$REAL, loss.type = "SE", h_forc, c = FALSE, H1 = "same")
dm.test(e1, e2, h = h_forc)
DM.test(df$RDG2, df$ARM, df$REAL, loss.type = "SE", h_forc, c = TRUE, H1 = "same")
dm.test(e1, e2, h = h_forc)
DM.test(df$RDG2, df$RDG1, df$REAL, loss.type = "SE", h_forc, c = TRUE, H1 = "same")
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "SE", h_forc, c = TRUE, H1 = "same")
DM.test(df$RDG2, df$RFM, df$REAL, loss.type = "SE", h_forc, c = TRUE, H1 = "same")
DM.test(df$RDG2, df$LAS, df$REAL, loss.type = "SE", h_forc, c = TRUE, H1 = "same")
DM.test(df$RDG2, df$BMA, df$REAL, loss.type = "SE", h_forc, c = TRUE, H1 = "same")
DM.test(df$RDG2, df$DFM, df$REAL, loss.type = "SE", h_forc, c = TRUE, H1 = "same")
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "SE", h_forc, c = TRUE, H1 = "same")
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "SE", h_forc, c = TRUE, H1 = "same")
dm.test(df$RDG2 - df$REAL, df$RDG - df$REAL, h = h_forc)
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "SE", h_forc, c = TRUE, H1 = "same")
dm.test(df$RDG2 - df$REAL, df$RDG - df$REAL, h = h_forc)
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "SE", h_forc, c = TRUE, H1 = "same")
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "AE", h_forc, c = TRUE, H1 = "same")
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "SE", h_forc, c = TRUE, H1 = "same")
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "AE", h_forc, c = TRUE, H1 = "same")
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "SE", h_forc, c = TRUE, H1 = "same")
dm.test(df$RDG2 - df$REAL, df$RDG - df$REAL, h = h_forc, power = 1)
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "SE", h_forc, c = TRUE, H1 = "same")
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "AE", h_forc, c = TRUE, H1 = "same")
dm.test(df$RDG2 - df$REAL, df$RDG - df$REAL, h = h_forc, power = 1)
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "AE", h_forc, c = TRUE, H1 = "same")
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "AE", h_forc, c = FALSE, H1 = "same")
dm.test(df$RDG2 - df$REAL, df$RDG - df$REAL, h = h_forc, power = 1)
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "AE", h_forc, c = FALSE, H1 = "same")
dm.test(df$RDG2 - df$REAL, df$RDG - df$REAL, h = h_forc, power = 1)
DM.test(df$RDG2, df$RDG, df$REAL, loss.type = "SE", h_forc, c = FALSE, H1 = "same")
df
ncol(df)
df <- read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h_forc, "-J", J,
"/combined",
".csv"))
y_real <- df$REAL
df <- df %>% select(-REAL)
y_real
df
ncol(df)
df
df_out <- df <- data.frame()
df_out <- data.frame()
df_out
colnames(df_in)
library(forecast)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(multDM)
level = 4
h_forc = 6
J = 277
df_in <- read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h_forc, "-J", J,
"/combined",
".csv"))
y_real <- df_in$REAL
df_in <- df_in %>% select(-REAL)
colnames(df_in)
df_out$model <- colnames(df_in)
df_out
library(forecast)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(multDM)
level = 4
h_forc = 6
J = 277
df_in <- read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h_forc, "-J", J,
"/combined",
".csv"))
y_real <- df_in$REAL
df_in <- df_in %>% select(-REAL)
df_out <- data.frame()
df_out$model <- colnames(df_in)
df_out
df_out
df_out$model <- colnames(df_in)
df_out$model <- colnames(df_in)
df_out$model <- colnames(df_in)
df_out$model <- colnames(df_in)
df_out$model <- colnames(df_in)
df_out$model <- colnames(df_in)
colnames(df_in)
colnames(df_in)'
colnames(df_in)
c("small", "large", "medium")
library(shiny)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(reshape2)
#
# read_csv("../data/with-real/actual-forc-data.csv") %>%
#   mutate(time = row_number()) %>%
#   select(c("REAL", "ARM"))
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"models", "Time Series Comparison:",
c(
"AR1 Model" = "ARM",
"OLS Model" = "OLS",
"Model Averaging" = "MAG",
"Dynamic Factor Model" = "DFM",
"Dynamic Factor Model 2" = "DFM2",
"Random Walk Model" = "RWM",
"Ridge Model" = "RDG",
"Ridge Model 2" = "RDG2",
"LASSO Model" = "LAS",
"LASSO Model 2" = "LAS2",
"Random Forest Regression" = "RFM",
"Bayesian Model Averaging" = "BMA",
"Ensemble" = "ESMB")
),
radioButtons(
"oos_period", "Time Series Comparison:",
c(
"1984:01" = "277",
"1990:01" = "349",
"2000:01" = "469"
))
),
mainPanel(
plotOutput("timeplot")
)
)
)
server <- function(input, output) {
tsdata <- reactive({
check <- read_csv(paste0("../../data/result-forc-indi/level4-h6-J",
input$oos_period,
"/combined",
".csv")) %>%
select(REAL, input$models) %>%
mutate(time = row_number()) %>%
melt(id = "time")
})
output$timeplot <- renderPlot({
ggplot(tsdata(), aes(x = time, y = value, color = variable)) +
#geom_line(aes(y = REAL, color = "REAL"), size = 1) +
geom_line() +
theme_minimal() +
theme(legend.title=element_blank()) +
labs(y = "Inflation", x = "Time")
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(reshape2)
#
# read_csv("../data/with-real/actual-forc-data.csv") %>%
#   mutate(time = row_number()) %>%
#   select(c("REAL", "ARM"))
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"models", "Time Series Comparison:",
c(
"AR1 Model" = "ARM",
"Bayesian Model Averaging" = "BMA",
"Bayesian Model Averaging 2" = "BMA2",
"Dynamic Factor Model" = "DFM",
"Dynamic Factor Model 2" = "DFM2",
"LASSO Model" = "LAS",
"LASSO Model 2" = "LAS2",
"Model Averaging" = "MAG",
"OLS Model" = "OLS",
"Random Forest Regression" = "RFM",
"Random Forest Regression 2" = "RFM2",
"Ridge Model" = "RDG",
"Ridge Model 2" = "RDG2",
"Random Walk Model" = "RWM",
"Ensemble" = "ESMB")
),
radioButtons(
"oos_period", "Time Series Comparison:",
c(
"1984:01" = "277",
"1990:01" = "349",
"2000:01" = "469"
))
),
mainPanel(
plotOutput("timeplot")
)
)
)
server <- function(input, output) {
tsdata <- reactive({
check <- read_csv(paste0("../../data/result-forc-indi/level4-h6-J",
input$oos_period,
"/combined",
".csv")) %>%
select(REAL, input$models) %>%
mutate(time = row_number()) %>%
melt(id = "time")
})
output$timeplot <- renderPlot({
ggplot(tsdata(), aes(x = time, y = value, color = variable)) +
#geom_line(aes(y = REAL, color = "REAL"), size = 1) +
geom_line() +
theme_minimal() +
theme(legend.title=element_blank()) +
labs(y = "Inflation", x = "Time")
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(reshape2)
#
# read_csv("../data/with-real/actual-forc-data.csv") %>%
#   mutate(time = row_number()) %>%
#   select(c("REAL", "ARM"))
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"models", "Time Series Comparison:",
c(
"AR1 Model" = "ARM",
"Bayesian Model Averaging" = "BMA",
"Bayesian Model Averaging 2" = "BMA2",
"Dynamic Factor Model" = "DFM",
"Dynamic Factor Model 2" = "DFM2",
"LASSO Model" = "LAS",
"LASSO Model 2" = "LAS2",
"Model Averaging" = "MAG",
"OLS Model" = "OLS",
"Random Forest Regression" = "RFM",
"Random Forest Regression 2" = "RFM2",
"Ridge Model" = "RDG",
"Ridge Model 2" = "RDG2",
"Random Walk Model" = "RWM",
"Ensemble" = "ESMB")
),
radioButtons(
"oos_period", "Time Series Comparison:",
c(
"1984:01" = "277",
"1990:01" = "349",
"2000:01" = "469"
))
),
mainPanel(
plotOutput("timeplot")
)
)
)
server <- function(input, output) {
tsdata <- reactive({
check <- read_csv(paste0("../../data/result-forc-indi/level4-h6-J",
input$oos_period,
"/combined",
".csv")) %>%
select(REAL, input$models) %>%
mutate(time = row_number()) %>%
melt(id = "time")
})
output$timeplot <- renderPlot({
ggplot(tsdata(), aes(x = time, y = value, color = variable)) +
#geom_line(aes(y = REAL, color = "REAL"), size = 1) +
geom_line() +
theme_minimal() +
theme(legend.title=element_blank()) +
labs(y = "Inflation", x = "Time")
})
}
shinyApp(ui, server)
