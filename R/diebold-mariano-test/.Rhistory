library(lubridate)
#
# read_csv("../data/with-real/actual-forc-data.csv") %>%
#   mutate(time = row_number()) %>%
#   select(c("REAL", "ARM"))
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"models", "Time Series Comparison:",
c(
"AR1 Model" = "ARM",
"Bayesian Model Averaging" = "BMA",
"Bayesian Model Averaging 2" = "BMA2",
"Dynamic Factor Model" = "DFM",
"Dynamic Factor Model 2" = "DFM2",
"LASSO Model" = "LAS",
"LASSO Model 2" = "LAS2",
"Model Averaging" = "MAG",
"OLS Model" = "OLS",
"Random Forest Regression" = "RFM",
"Random Forest Regression 2" = "RFM2",
"Ridge Model" = "RDG",
"Ridge Model 2" = "RDG2",
"Random Walk Model" = "RWM",
"Ensemble" = "ESMB")
),
radioButtons(
"oos_period", "Time Series Comparison:",
c(
"1984:01" = "301",
"1990:01" = "373",
"2000:01" = "493"
)
),
radioButtons(
"forecast_horizon", "Forecast Horizon:",
c(
"3 months" = "3",
"6 months" = "6",
"12 months" = "12"
)
)
),
mainPanel(
plotOutput("timeplot")
)
)
)
server <- function(input, output) {
tsdata <- reactive({
check <- read_csv(paste0("../../data/result-forc-indi/level4-h",
input$forecast_horizon,
"-J",
input$oos_period,
"/combined",
".csv")) %>%
select(REAL, input$models) %>%
mutate(time = row_number()) %>%
melt(id = "time")
})
output$timeplot <- renderPlot({
ggplot(tsdata(), aes(x = time, y = value, color = variable)) +
#geom_line(aes(y = REAL, color = "REAL"), size = 1) +
geom_line() +
theme_minimal() +
theme(legend.title = element_blank()) +
labs(y = "Inflation", x = "Time")
})
}
shinyApp(ui, server)
library(shiny)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(reshape2)
library(lubridate)
#
# read_csv("../data/with-real/actual-forc-data.csv") %>%
#   mutate(time = row_number()) %>%
#   select(c("REAL", "ARM"))
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
checkboxGroupInput(
"models", "Time Series Comparison:",
c(
"AR1 Model" = "ARM",
"Bayesian Model Averaging" = "BMA",
"Bayesian Model Averaging 2" = "BMA2",
"Dynamic Factor Model" = "DFM",
"Dynamic Factor Model 2" = "DFM2",
"LASSO Model" = "LAS",
"LASSO Model 2" = "LAS2",
"Model Averaging" = "MAG",
"OLS Model" = "OLS",
"Random Forest Regression" = "RDF",
"Random Forest Regression 2" = "RDF2",
"Ridge Model" = "RDG",
"Ridge Model 2" = "RDG2",
"Random Walk Model" = "RWM",
"Ensemble" = "ESMB")
),
radioButtons(
"oos_period", "Time Series Comparison:",
c(
"1984:01" = "301",
"1990:01" = "373",
"2000:01" = "493"
)
),
radioButtons(
"forecast_horizon", "Forecast Horizon:",
c(
"3 months" = "3",
"6 months" = "6",
"12 months" = "12"
)
)
),
mainPanel(
plotOutput("timeplot")
)
)
)
server <- function(input, output) {
tsdata <- reactive({
check <- read_csv(paste0("../../data/result-forc-indi/level4-h",
input$forecast_horizon,
"-J",
input$oos_period,
"/combined",
".csv")) %>%
select(REAL, input$models) %>%
mutate(time = row_number()) %>%
melt(id = "time")
})
output$timeplot <- renderPlot({
ggplot(tsdata(), aes(x = time, y = value, color = variable)) +
#geom_line(aes(y = REAL, color = "REAL"), size = 1) +
geom_line() +
theme_minimal() +
theme(legend.title = element_blank()) +
labs(y = "Inflation", x = "Time")
})
}
shinyApp(ui, server)
library(forecast)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(multDM)
level = 4
h = 3
J = 301
df_in <- read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h, "-J", J,
"/combined",
".csv"))
y_real <- df_in$REAL
df_in <- df_in %>% select(-REAL)
df_out <- data.frame()
df_out$model <- colnames(df_in)
colnames(df_in)
df_out$model
df_out$model <- colnames(df_in)
y_real <- df_in$REAL
df_in <- df_in %>% select(-REAL)
df_out <- data.frame()
df_out
df_in
colnames(df_in)
df_out$model
df_out$model <- colnames(df_in)
names = colnames(df_in)
df = data.frame(names)
df
df = data.frame(names, colnames(df_in))
df
library(forecast)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(multDM)
level = 4
h = 3
J = 301
df_in <- read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h, "-J", J,
"/combined",
".csv"))
y_real <- df_in$REAL
df_in <- df_in %>% select(-REAL)
names = colnames(df_in)
df_out = data.frame(names, colnames(df_in))
df_out
library(forecast)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(multDM)
level = 4
h = 3
J = 301
df_in <- read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h, "-J", J,
"/combined",
".csv"))
y_real <- df_in$REAL
df_in <- df_in %>% select(-REAL)
names = colnames(df_in)
df_out = data.frame(names)
df_out
library(forecast)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(multDM)
level = 4
h = 3
J = 301
df_in <- read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h, "-J", J,
"/combined",
".csv"))
y_real <- df_in$REAL
df_in <- df_in %>% select(-REAL)
names <- colnames(df_in)
df_out <- data.frame(names)
DM.test(df$LAS, df$RDG, df$REAL, loss.type = "SE", h, c = FALSE, H1 = "same")
DM.test(df_in$LAS, df_in$RDG, df_in$REAL, loss.type = "SE", h, c = FALSE, H1 = "same")
y_real
DM.test(df_in$LAS, df_in$RDG, y_real, loss.type = "SE", h, c = FALSE, H1 = "same")
?multDM
?DM.test
DM.test(df_in$LAS, df_in$RDG, y_real, loss.type = "SE", h, c = TRUE, H1 = "same")
DM.test(df_in$LAS, df_in$RDG, y_real, loss.type = "SE", h, c = TRUE, H1 = "same")
DM.test(df_in$LAS, df_in$RDG, y_real, loss.type = "SE", h, c = TRUE, H1 = "same")
DM.test(df_in$LAS, df_in$RDG, y_real, loss.type = "SE", h, c = TRUE, H1 = "same")
DM.test(df_in$LAS, df_in$RDG, y_real, loss.type = "SE", h, c = FALSE, H1 = "same")
DM.test(df_in$LAS, df_in$RDG, y_real, loss.type = "SE", h, c = FALSE, H1 = "same")
DM.test(df_in$LAS, df_in$RDG, y_real, loss.type = "SE", h, c = FALSE, H1 = "same")
DM.test(df_in$LAS, df_in$RDG, y_real, loss.type = "SE", h, c = FALSE, H1 = "same")
DM.test(df_in$LAS, df_in$RDG, y_real, loss.type = "SE", h, c = FALSE, H1 = "same")
DM.test(df_in$LAS, df_in$RDG, y_real, loss.type = "SE", h, c = FALSE, H1 = "same")
DM.test(df_in$LAS, df_in$RDG, y_real, loss.type = "SE", h, c = TRUE, H1 = "same")
for (name in names){
print(paste("The year is", name))
}
num_model <- length(names)
numeric(3)
i = 1
names[i]
name_row <- names[i]
for (name_col in names){
for (r in 1:num_model){
name_row <- names[i]
print(paste(name_col, name_row))
}
}
for (name_col in names){
for (r in 1:num_model){
name_row <- names[r]
print(paste(name_col, name_row))
}
}
DM.test(df_in$LAS, df_in$RDG, y_real, loss.type = "SE", h, c = TRUE, H1 = "same")
dmtest <- DM.test(df_in$LAS, df_in$RDG, y_real, loss.type = "SE", h, c = TRUE, H1 = "same")
View(dmtest)
View(dmtest)
dmtest$p.value
dm_vec <- numeric(num_model)
name_col
df_in$name_col
df_in[name_col]
df_out
colnames(df_out) <- names
dm_vec
df_out$newcol <- dm_vec
df_out
library(forecast)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(multDM)
level = 4
h = 3
J = 301
df_in <- read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h, "-J", J,
"/combined",
".csv"))
y_real <- df_in$REAL
df_in <- df_in %>% select(-REAL)
models <- colnames(df_in)
df_out <- data.frame(models)
num_model <- length(models)
num_model
models
for (model_col in models){
dm_vec <- numeric(num_model)
for (r in 1:num_model){
name_row <- names[r]
dmtest <- DM.test(df_in[name_col], df_in[name_row],
y_real, loss.type = "SE",
h, c = TRUE, H1 = "same")
dm_vec[r] <- dmtest$p.value
}
df_out$newcol <- dm_vec
names(df_out)[1 + r] <- model_col
}
df_out
name_col
name_row
library(forecast)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(multDM)
level = 4
h = 3
J = 301
df_in <- read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h, "-J", J,
"/combined",
".csv"))
y_real <- df_in$REAL
df_in <- df_in %>% select(-REAL)
models <- colnames(df_in)
df_out <- data.frame(models)
num_model <- length(models)
for (model_col in models){
dm_vec <- numeric(num_model)
for (r in 1:num_model){
name_row <- names[r]
dmtest <- DM.test(df_in[name_col], df_in[name_row],
y_real, loss.type = "SE",
h, c = TRUE, H1 = "same")
dm_vec[r] <- dmtest$p.value
}
df_out$newcol <- dm_vec
colnames(df_out)[colnames(data)=="newcol"] <- model_col
}
df_out
colnames(data)=="newcol"
library(forecast)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(multDM)
level = 4
h = 3
J = 301
df_in <- read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h, "-J", J,
"/combined",
".csv"))
y_real <- df_in$REAL
df_in <- df_in %>% select(-REAL)
models <- colnames(df_in)
df_out <- data.frame(models)
num_model <- length(models)
for (model_col in models){
dm_vec <- numeric(num_model)
for (r in 1:num_model){
name_row <- names[r]
dmtest <- DM.test(df_in[name_col], df_in[name_row],
y_real, loss.type = "SE",
h, c = TRUE, H1 = "same")
dm_vec[r] <- dmtest$p.value
}
df_out$newcol <- dm_vec
colnames(df_out)[colnames(df_out)=="newcol"] <- model_col
}
df_out
View(df_out)
library(forecast)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(multDM)
level = 4
h = 3
J = 301
df_in <- read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h, "-J", J,
"/combined",
".csv"))
y_real <- df_in$REAL
df_in <- df_in %>% select(-REAL)
models <- colnames(df_in)
df_out <- data.frame(models)
num_model <- length(models)
for (model_col in models){
dm_vec <- numeric(num_model)
for (r in 1:num_model){
model_row <- models[r]
dmtest <- DM.test(df_in[model_col], df_in[model_row],
y_real, loss.type = "SE",
h, c = TRUE, H1 = "same")
dm_vec[r] <- dmtest$p.value
}
df_out$newcol <- dm_vec
colnames(df_out)[colnames(df_out)=="newcol"] <- model_col
}
View(df_out)
save(df_out, file = paste0("../../data/diebold-mariano/level4-h", h, "-J", J, ".csv"))
df_out
write.csv(file = paste0("../../data/diebold-mariano/level4-h", h, "-J", J, ".csv"), df_out)
?write.csv
write.csv(file = paste0("../../data/diebold-mariano/level4-h", h, "-J", J, ".csv"), df_out, row.names=FALSE)
library(forecast)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(multDM)
level = 4
h = 3
J = 301
df_in <- read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h, "-J", J,
"/combined",
".csv"))
y_real <- df_in$REAL
df_in <- df_in %>% select(-REAL)
p_value <- colnames(df_in)
df_out <- data.frame(p_value)
models <- p_value
num_model <- length(models)
for (model_col in models){
dm_vec <- numeric(num_model)
for (r in 1:num_model){
model_row <- models[r]
dmtest <- DM.test(df_in[model_col], df_in[model_row],
y_real, loss.type = "SE",
h, c = TRUE, H1 = "same")
dm_vec[r] <- dmtest$p.value
}
df_out$newcol <- dm_vec
colnames(df_out)[colnames(df_out)=="newcol"] <- model_col
}
write.csv(file = paste0("../../data/diebold-mariano/level4-h", h, "-J", J, ".csv"), df_out, row.names=FALSE)
library(forecast)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(multDM)
level = 4
for (h in c(3, 6, 12)){
for (J in c(301, 373, 493)){
df_in <- read_csv(paste0("../../data/result-forc-indi/level", level,
"-h", h, "-J", J,
"/combined",
".csv"))
y_real <- df_in$REAL
df_in <- df_in %>% select(-REAL)
p_value <- colnames(df_in)
df_out <- data.frame(p_value)
models <- p_value
num_model <- length(models)
for (model_col in models){
dm_vec <- numeric(num_model)
for (r in 1:num_model){
model_row <- models[r]
dmtest <- DM.test(df_in[model_col], df_in[model_row],
y_real, loss.type = "SE",
h, c = TRUE, H1 = "same")
dm_vec[r] <- dmtest$p.value
}
df_out$newcol <- dm_vec
colnames(df_out)[colnames(df_out)=="newcol"] <- model_col
}
write.csv(file = paste0("../../data/diebold-mariano/level4-h", h, "-J", J, ".csv"), df_out, row.names=FALSE)
}
}
?dmtest
?DM.test
library(forecast)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(multDM)
level = 4
case = "baseline"
for (h in c(3, 6, 12)){
for (J in c(301, 373, 493)){
df_in <- read_csv(paste0("../../data/results/", case,
"/level", level,
"-h", h, "-J", J,
"/combined",
".csv"))
y_real <- df_in$REAL
df_in <- df_in %>% select(-REAL)
p_value <- colnames(df_in)
df_out <- data.frame(p_value)
models <- p_value
num_model <- length(models)
for (model_col in models){
dm_vec <- numeric(num_model)
for (r in 1:num_model){
model_row <- models[r]
dmtest <- DM.test(df_in[model_col], df_in[model_row],
y_real, loss.type = "SE",
h, c = TRUE, H1 = "same")
dm_vec[r] <- dmtest$p.value
}
df_out$newcol <- dm_vec
colnames(df_out)[colnames(df_out)=="newcol"] <- model_col
}
write.csv(file = paste0("../../data/diebold-mariano/", case, "/level4-h", h, "-J", J, ".csv"), df_out, row.names=FALSE)
}
}
